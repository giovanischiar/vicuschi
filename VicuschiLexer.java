// Generated from Vicuschi.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class VicuschiLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, IF=11, ENDIF=12, FOR=13, ENDFOR=14, CASE=15, WHEN=16, WHILE=17, 
		ENDWHILE=18, ENDCASE=19, CONTINUE=20, ENDF=21, RETURN=22, IMPORT=23, INT=24, 
		FLOAT=25, STRING=26, BOOLEAN=27, MAJOR=28, MINOR=29, EQUALS=30, MAJOR_EQUALS=31, 
		MINOR_EQUALS=32, DIFFERENT=33, ATTRIBUTION=34, INCREMENT=35, DECREMENT=36, 
		THEN=37, UNARY_PLUS=38, UNARY_MINUS=39, LOGICAL_AND=40, LOGICAL_OR=41, 
		SEMICOLON=42, ARRAY_INDEX=43, EACH=44, BOOL=45, NUMBER=46, WORD=47, ARRAY=48, 
		INTERVAL=49, ID=50, S_COMMENTARY=51, M_COMMENTARY=52, WS=53;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "IF", "ENDIF", "FOR", "ENDFOR", "CASE", "WHEN", "WHILE", "ENDWHILE", 
		"ENDCASE", "CONTINUE", "ENDF", "RETURN", "IMPORT", "INT", "FLOAT", "STRING", 
		"BOOLEAN", "MAJOR", "MINOR", "EQUALS", "MAJOR_EQUALS", "MINOR_EQUALS", 
		"DIFFERENT", "ATTRIBUTION", "INCREMENT", "DECREMENT", "THEN", "UNARY_PLUS", 
		"UNARY_MINUS", "LOGICAL_AND", "LOGICAL_OR", "SEMICOLON", "ARRAY_INDEX", 
		"EACH", "BOOL", "NUMBER", "NUMBERTYPE", "WORD", "ARRAY", "INTERVAL", "INCLUSIVE_TERMINAL", 
		"NONINCLUSIVE_TERMINAL", "VAR", "LETTER", "DIGIT", "SYMBOL", "ID", "S_COMMENTARY", 
		"M_COMMENTARY", "WS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'*'", "'/'", "'^'", "'('", "')'", "','", "'!'", "'['", "']'", "'[]'", 
		"'if'", "'endif'", "'for'", "'endfor'", "'case'", "'when'", "'while'", 
		"'endwhile'", "'endcase'", "'continue'", "'endf'", "'return'", "'import'", 
		"'int'", "'float'", "'string'", "'boolean'", "'>'", "'<'", "'=='", "'>='", 
		"'<='", "'!='", "'='", "'++'", "'--'", "'->'", "'+'", "'-'", "'&'", "'|'", 
		"';'", null, "':'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, "IF", 
		"ENDIF", "FOR", "ENDFOR", "CASE", "WHEN", "WHILE", "ENDWHILE", "ENDCASE", 
		"CONTINUE", "ENDF", "RETURN", "IMPORT", "INT", "FLOAT", "STRING", "BOOLEAN", 
		"MAJOR", "MINOR", "EQUALS", "MAJOR_EQUALS", "MINOR_EQUALS", "DIFFERENT", 
		"ATTRIBUTION", "INCREMENT", "DECREMENT", "THEN", "UNARY_PLUS", "UNARY_MINUS", 
		"LOGICAL_AND", "LOGICAL_OR", "SEMICOLON", "ARRAY_INDEX", "EACH", "BOOL", 
		"NUMBER", "WORD", "ARRAY", "INTERVAL", "ID", "S_COMMENTARY", "M_COMMENTARY", 
		"WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public VicuschiLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Vicuschi.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\67\u01bb\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t"+
		"=\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n"+
		"\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21"+
		"\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31"+
		"\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36"+
		"\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3%"+
		"\3&\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\6,\u0121\n,\r,\16,\u0122"+
		"\3-\3-\3.\3.\3.\3.\3.\5.\u012c\n.\3/\3/\3\60\6\60\u0131\n\60\r\60\16\60"+
		"\u0132\3\60\3\60\6\60\u0137\n\60\r\60\16\60\u0138\3\60\6\60\u013c\n\60"+
		"\r\60\16\60\u013d\3\60\3\60\7\60\u0142\n\60\f\60\16\60\u0145\13\60\5\60"+
		"\u0147\n\60\3\61\3\61\3\61\3\61\3\61\7\61\u014e\n\61\f\61\16\61\u0151"+
		"\13\61\3\61\3\61\3\62\3\62\3\62\3\62\5\62\u0159\n\62\3\62\7\62\u015c\n"+
		"\62\f\62\16\62\u015f\13\62\3\62\3\62\3\63\3\63\5\63\u0165\n\63\3\64\3"+
		"\64\6\64\u0169\n\64\r\64\16\64\u016a\3\64\3\64\5\64\u016f\n\64\3\64\6"+
		"\64\u0172\n\64\r\64\16\64\u0173\3\64\3\64\3\65\3\65\6\65\u017a\n\65\r"+
		"\65\16\65\u017b\3\65\3\65\5\65\u0180\n\65\3\65\6\65\u0183\n\65\r\65\16"+
		"\65\u0184\3\65\3\65\3\66\3\66\3\66\5\66\u018c\n\66\3\67\3\67\38\38\39"+
		"\39\3:\3:\3:\7:\u0197\n:\f:\16:\u019a\13:\3;\3;\3;\3;\7;\u01a0\n;\f;\16"+
		";\u01a3\13;\3;\3;\3<\3<\3<\3<\7<\u01ab\n<\f<\16<\u01ae\13<\3<\3<\3<\3"+
		"<\3<\3=\6=\u01b6\n=\r=\16=\u01b7\3=\3=\3\u01ac\2>\3\3\5\4\7\5\t\6\13\7"+
		"\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25"+
		")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O"+
		")Q*S+U,W-Y.[/]\60_\2a\61c\62e\63g\2i\2k\2m\2o\2q\2s\64u\65w\66y\67\3\2"+
		"\7\4\2C\\c|\3\2\62;\13\2##((*\61<@]]__aa}\177\u02c8\u02c8\4\2\f\f\17\17"+
		"\5\2\13\f\17\17\"\"\2\u01cf\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3"+
		"\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2"+
		"\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37"+
		"\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3"+
		"\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2"+
		"\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C"+
		"\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2"+
		"\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2"+
		"\2]\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w"+
		"\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5}\3\2\2\2\7\177\3\2\2\2\t\u0081\3\2\2"+
		"\2\13\u0083\3\2\2\2\r\u0085\3\2\2\2\17\u0087\3\2\2\2\21\u0089\3\2\2\2"+
		"\23\u008b\3\2\2\2\25\u008d\3\2\2\2\27\u0090\3\2\2\2\31\u0093\3\2\2\2\33"+
		"\u0099\3\2\2\2\35\u009d\3\2\2\2\37\u00a4\3\2\2\2!\u00a9\3\2\2\2#\u00ae"+
		"\3\2\2\2%\u00b4\3\2\2\2\'\u00bd\3\2\2\2)\u00c5\3\2\2\2+\u00ce\3\2\2\2"+
		"-\u00d3\3\2\2\2/\u00da\3\2\2\2\61\u00e1\3\2\2\2\63\u00e5\3\2\2\2\65\u00eb"+
		"\3\2\2\2\67\u00f2\3\2\2\29\u00fa\3\2\2\2;\u00fc\3\2\2\2=\u00fe\3\2\2\2"+
		"?\u0101\3\2\2\2A\u0104\3\2\2\2C\u0107\3\2\2\2E\u010a\3\2\2\2G\u010c\3"+
		"\2\2\2I\u010f\3\2\2\2K\u0112\3\2\2\2M\u0115\3\2\2\2O\u0117\3\2\2\2Q\u0119"+
		"\3\2\2\2S\u011b\3\2\2\2U\u011d\3\2\2\2W\u0120\3\2\2\2Y\u0124\3\2\2\2["+
		"\u012b\3\2\2\2]\u012d\3\2\2\2_\u0146\3\2\2\2a\u0148\3\2\2\2c\u0154\3\2"+
		"\2\2e\u0164\3\2\2\2g\u0166\3\2\2\2i\u0177\3\2\2\2k\u018b\3\2\2\2m\u018d"+
		"\3\2\2\2o\u018f\3\2\2\2q\u0191\3\2\2\2s\u0193\3\2\2\2u\u019b\3\2\2\2w"+
		"\u01a6\3\2\2\2y\u01b5\3\2\2\2{|\7,\2\2|\4\3\2\2\2}~\7\61\2\2~\6\3\2\2"+
		"\2\177\u0080\7`\2\2\u0080\b\3\2\2\2\u0081\u0082\7*\2\2\u0082\n\3\2\2\2"+
		"\u0083\u0084\7+\2\2\u0084\f\3\2\2\2\u0085\u0086\7.\2\2\u0086\16\3\2\2"+
		"\2\u0087\u0088\7#\2\2\u0088\20\3\2\2\2\u0089\u008a\7]\2\2\u008a\22\3\2"+
		"\2\2\u008b\u008c\7_\2\2\u008c\24\3\2\2\2\u008d\u008e\7]\2\2\u008e\u008f"+
		"\7_\2\2\u008f\26\3\2\2\2\u0090\u0091\7k\2\2\u0091\u0092\7h\2\2\u0092\30"+
		"\3\2\2\2\u0093\u0094\7g\2\2\u0094\u0095\7p\2\2\u0095\u0096\7f\2\2\u0096"+
		"\u0097\7k\2\2\u0097\u0098\7h\2\2\u0098\32\3\2\2\2\u0099\u009a\7h\2\2\u009a"+
		"\u009b\7q\2\2\u009b\u009c\7t\2\2\u009c\34\3\2\2\2\u009d\u009e\7g\2\2\u009e"+
		"\u009f\7p\2\2\u009f\u00a0\7f\2\2\u00a0\u00a1\7h\2\2\u00a1\u00a2\7q\2\2"+
		"\u00a2\u00a3\7t\2\2\u00a3\36\3\2\2\2\u00a4\u00a5\7e\2\2\u00a5\u00a6\7"+
		"c\2\2\u00a6\u00a7\7u\2\2\u00a7\u00a8\7g\2\2\u00a8 \3\2\2\2\u00a9\u00aa"+
		"\7y\2\2\u00aa\u00ab\7j\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7p\2\2\u00ad"+
		"\"\3\2\2\2\u00ae\u00af\7y\2\2\u00af\u00b0\7j\2\2\u00b0\u00b1\7k\2\2\u00b1"+
		"\u00b2\7n\2\2\u00b2\u00b3\7g\2\2\u00b3$\3\2\2\2\u00b4\u00b5\7g\2\2\u00b5"+
		"\u00b6\7p\2\2\u00b6\u00b7\7f\2\2\u00b7\u00b8\7y\2\2\u00b8\u00b9\7j\2\2"+
		"\u00b9\u00ba\7k\2\2\u00ba\u00bb\7n\2\2\u00bb\u00bc\7g\2\2\u00bc&\3\2\2"+
		"\2\u00bd\u00be\7g\2\2\u00be\u00bf\7p\2\2\u00bf\u00c0\7f\2\2\u00c0\u00c1"+
		"\7e\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3\7u\2\2\u00c3\u00c4\7g\2\2\u00c4"+
		"(\3\2\2\2\u00c5\u00c6\7e\2\2\u00c6\u00c7\7q\2\2\u00c7\u00c8\7p\2\2\u00c8"+
		"\u00c9\7v\2\2\u00c9\u00ca\7k\2\2\u00ca\u00cb\7p\2\2\u00cb\u00cc\7w\2\2"+
		"\u00cc\u00cd\7g\2\2\u00cd*\3\2\2\2\u00ce\u00cf\7g\2\2\u00cf\u00d0\7p\2"+
		"\2\u00d0\u00d1\7f\2\2\u00d1\u00d2\7h\2\2\u00d2,\3\2\2\2\u00d3\u00d4\7"+
		"t\2\2\u00d4\u00d5\7g\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7\7w\2\2\u00d7\u00d8"+
		"\7t\2\2\u00d8\u00d9\7p\2\2\u00d9.\3\2\2\2\u00da\u00db\7k\2\2\u00db\u00dc"+
		"\7o\2\2\u00dc\u00dd\7r\2\2\u00dd\u00de\7q\2\2\u00de\u00df\7t\2\2\u00df"+
		"\u00e0\7v\2\2\u00e0\60\3\2\2\2\u00e1\u00e2\7k\2\2\u00e2\u00e3\7p\2\2\u00e3"+
		"\u00e4\7v\2\2\u00e4\62\3\2\2\2\u00e5\u00e6\7h\2\2\u00e6\u00e7\7n\2\2\u00e7"+
		"\u00e8\7q\2\2\u00e8\u00e9\7c\2\2\u00e9\u00ea\7v\2\2\u00ea\64\3\2\2\2\u00eb"+
		"\u00ec\7u\2\2\u00ec\u00ed\7v\2\2\u00ed\u00ee\7t\2\2\u00ee\u00ef\7k\2\2"+
		"\u00ef\u00f0\7p\2\2\u00f0\u00f1\7i\2\2\u00f1\66\3\2\2\2\u00f2\u00f3\7"+
		"d\2\2\u00f3\u00f4\7q\2\2\u00f4\u00f5\7q\2\2\u00f5\u00f6\7n\2\2\u00f6\u00f7"+
		"\7g\2\2\u00f7\u00f8\7c\2\2\u00f8\u00f9\7p\2\2\u00f98\3\2\2\2\u00fa\u00fb"+
		"\7@\2\2\u00fb:\3\2\2\2\u00fc\u00fd\7>\2\2\u00fd<\3\2\2\2\u00fe\u00ff\7"+
		"?\2\2\u00ff\u0100\7?\2\2\u0100>\3\2\2\2\u0101\u0102\7@\2\2\u0102\u0103"+
		"\7?\2\2\u0103@\3\2\2\2\u0104\u0105\7>\2\2\u0105\u0106\7?\2\2\u0106B\3"+
		"\2\2\2\u0107\u0108\7#\2\2\u0108\u0109\7?\2\2\u0109D\3\2\2\2\u010a\u010b"+
		"\7?\2\2\u010bF\3\2\2\2\u010c\u010d\7-\2\2\u010d\u010e\7-\2\2\u010eH\3"+
		"\2\2\2\u010f\u0110\7/\2\2\u0110\u0111\7/\2\2\u0111J\3\2\2\2\u0112\u0113"+
		"\7/\2\2\u0113\u0114\7@\2\2\u0114L\3\2\2\2\u0115\u0116\7-\2\2\u0116N\3"+
		"\2\2\2\u0117\u0118\7/\2\2\u0118P\3\2\2\2\u0119\u011a\7(\2\2\u011aR\3\2"+
		"\2\2\u011b\u011c\7~\2\2\u011cT\3\2\2\2\u011d\u011e\7=\2\2\u011eV\3\2\2"+
		"\2\u011f\u0121\5o8\2\u0120\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0120"+
		"\3\2\2\2\u0122\u0123\3\2\2\2\u0123X\3\2\2\2\u0124\u0125\7<\2\2\u0125Z"+
		"\3\2\2\2\u0126\u0127\7{\2\2\u0127\u0128\7g\2\2\u0128\u012c\7u\2\2\u0129"+
		"\u012a\7p\2\2\u012a\u012c\7q\2\2\u012b\u0126\3\2\2\2\u012b\u0129\3\2\2"+
		"\2\u012c\\\3\2\2\2\u012d\u012e\5_\60\2\u012e^\3\2\2\2\u012f\u0131\5o8"+
		"\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133"+
		"\3\2\2\2\u0133\u0147\3\2\2\2\u0134\u0136\7\60\2\2\u0135\u0137\5o8\2\u0136"+
		"\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3\2"+
		"\2\2\u0139\u0147\3\2\2\2\u013a\u013c\5o8\2\u013b\u013a\3\2\2\2\u013c\u013d"+
		"\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013f\3\2\2\2\u013f"+
		"\u0143\7\60\2\2\u0140\u0142\5o8\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2"+
		"\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0147\3\2\2\2\u0145"+
		"\u0143\3\2\2\2\u0146\u0130\3\2\2\2\u0146\u0134\3\2\2\2\u0146\u013b\3\2"+
		"\2\2\u0147`\3\2\2\2\u0148\u014f\7$\2\2\u0149\u014e\5]/\2\u014a\u014e\5"+
		"m\67\2\u014b\u014e\5y=\2\u014c\u014e\5q9\2\u014d\u0149\3\2\2\2\u014d\u014a"+
		"\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014c\3\2\2\2\u014e\u0151\3\2\2\2\u014f"+
		"\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u014f\3\2"+
		"\2\2\u0152\u0153\7$\2\2\u0153b\3\2\2\2\u0154\u0155\7}\2\2\u0155\u015d"+
		"\5k\66\2\u0156\u0158\7.\2\2\u0157\u0159\5y=\2\u0158\u0157\3\2\2\2\u0158"+
		"\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c\5k\66\2\u015b\u0156\3\2"+
		"\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e"+
		"\u0160\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0161\7\177\2\2\u0161d\3\2\2"+
		"\2\u0162\u0165\5g\64\2\u0163\u0165\5i\65\2\u0164\u0162\3\2\2\2\u0164\u0163"+
		"\3\2\2\2\u0165f\3\2\2\2\u0166\u0168\7]\2\2\u0167\u0169\5o8\2\u0168\u0167"+
		"\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b"+
		"\u016c\3\2\2\2\u016c\u016e\7.\2\2\u016d\u016f\5y=\2\u016e\u016d\3\2\2"+
		"\2\u016e\u016f\3\2\2\2\u016f\u0171\3\2\2\2\u0170\u0172\5o8\2\u0171\u0170"+
		"\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174"+
		"\u0175\3\2\2\2\u0175\u0176\7_\2\2\u0176h\3\2\2\2\u0177\u0179\7]\2\2\u0178"+
		"\u017a\5o8\2\u0179\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u0179\3\2\2"+
		"\2\u017b\u017c\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017f\7.\2\2\u017e\u0180"+
		"\5y=\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182\3\2\2\2\u0181"+
		"\u0183\5o8\2\u0182\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0182\3\2\2"+
		"\2\u0184\u0185\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\7+\2\2\u0187j\3"+
		"\2\2\2\u0188\u018c\5\67\34\2\u0189\u018c\5]/\2\u018a\u018c\5s:\2\u018b"+
		"\u0188\3\2\2\2\u018b\u0189\3\2\2\2\u018b\u018a\3\2\2\2\u018cl\3\2\2\2"+
		"\u018d\u018e\t\2\2\2\u018en\3\2\2\2\u018f\u0190\t\3\2\2\u0190p\3\2\2\2"+
		"\u0191\u0192\t\4\2\2\u0192r\3\2\2\2\u0193\u0198\5m\67\2\u0194\u0197\5"+
		"o8\2\u0195\u0197\5m\67\2\u0196\u0194\3\2\2\2\u0196\u0195\3\2\2\2\u0197"+
		"\u019a\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0199\3\2\2\2\u0199t\3\2\2\2"+
		"\u019a\u0198\3\2\2\2\u019b\u019c\7\61\2\2\u019c\u019d\7\61\2\2\u019d\u01a1"+
		"\3\2\2\2\u019e\u01a0\n\5\2\2\u019f\u019e\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1"+
		"\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u01a1\3\2"+
		"\2\2\u01a4\u01a5\b;\2\2\u01a5v\3\2\2\2\u01a6\u01a7\7\61\2\2\u01a7\u01a8"+
		"\7,\2\2\u01a8\u01ac\3\2\2\2\u01a9\u01ab\13\2\2\2\u01aa\u01a9\3\2\2\2\u01ab"+
		"\u01ae\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01af\3\2"+
		"\2\2\u01ae\u01ac\3\2\2\2\u01af\u01b0\7,\2\2\u01b0\u01b1\7\61\2\2\u01b1"+
		"\u01b2\3\2\2\2\u01b2\u01b3\b<\2\2\u01b3x\3\2\2\2\u01b4\u01b6\t\6\2\2\u01b5"+
		"\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7\u01b8\3\2"+
		"\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01ba\b=\2\2\u01baz\3\2\2\2\33\2\u0122"+
		"\u012b\u0132\u0138\u013d\u0143\u0146\u014d\u014f\u0158\u015d\u0164\u016a"+
		"\u016e\u0173\u017b\u017f\u0184\u018b\u0196\u0198\u01a1\u01ac\u01b7\3\b"+
		"\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}